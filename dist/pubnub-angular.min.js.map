{"version":3,"sources":["webpack:///webpack/bootstrap f66402eaf5f10dd656d4","webpack:///./src/index.js","webpack:///./src/vendor/polyfill.js","webpack:///./src/pubnub.js","webpack:///./config.common.json","webpack:///./src/wrapper.js","webpack:///./src/v3/wrapper_pubnub_v3.js","webpack:///./src/v3/mock_v3.js","webpack:///./src/mock.js","webpack:///./src/v3/config.pubnub-v3.json","webpack:///./src/v4/wrapper_pubnub_v4.js","webpack:///./src/v4/mock_v4.js","webpack:///./src/v4/subscribe_events_broadcaster.js","webpack:///./src/v4/config.pubnub-v4.json","webpack:///./src/pubnub_channel.js","webpack:///./src/pubnub_channel_group.js"],"names":[],"mappings":"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","file":"pubnub-angular.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f66402eaf5f10dd656d4\n **/","require('./vendor/polyfill.js');\nrequire('./pubnub.js');\nrequire('./pubnub_channel.js');\nrequire('./pubnub_channel_group.js');\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","/* eslint-disable */\n/* istanbul ignore next */\n// Object.create(proto[, propertiesObject])\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\nif (typeof Object.create !== 'function') {\n  Object.create = (function () {\n    let Temp = function () {};\n    return function (prototype) {\n      if (arguments.length > 1) {\n        throw new Error('Second argument not supported');\n      }\n      if (prototype !== Object(prototype) && prototype !== null) {\n        throw new TypeError('Argument must be an object or null');\n      }\n      if (prototype === null) {\n        throw Error('null [[Prototype]] not supported');\n      }\n      Temp.prototype = prototype;\n      let result = new Temp();\n      Temp.prototype = null;\n      return result;\n    };\n  })();\n}\n/* istanbul ignore next */\n// Production steps of ECMA-262, Edition 5, 15.4.4.19\n// Reference: http://es5.github.io/#x15.4.4.19\nif (!Array.prototype.map) {\n  Array.prototype.map = function(callback, thisArg) {\n    var T, A, k;\n    if (this == null) {\n      throw new TypeError(' this is null or not defined');\n    }\n    // 1. Let O be the result of calling ToObject passing the |this| \n    //    value as the argument.\n    var O = Object(this);\n    // 2. Let lenValue be the result of calling the Get internal \n    //    method of O with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n    var len = O.length >>> 0;\n    // 4. If IsCallable(callback) is false, throw a TypeError exception.\n    // See: http://es5.github.com/#x9.11\n    if (typeof callback !== 'function') {\n      throw new TypeError(callback + ' is not a function');\n    }\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    if (arguments.length > 1) {\n      T = thisArg;\n    }\n    // 6. Let A be a new array created as if by the expression new Array(len) \n    //    where Array is the standard built-in constructor with that name and \n    //    len is the value of len.\n    A = new Array(len);\n    // 7. Let k be 0\n    k = 0;\n    // 8. Repeat, while k < len\n    while (k < len) {\n      var kValue, mappedValue;\n      // a. Let Pk be ToString(k).\n      //   This is implicit for LHS operands of the in operator\n      // b. Let kPresent be the result of calling the HasProperty internal \n      //    method of O with argument Pk.\n      //   This step can be combined with c\n      // c. If kPresent is true, then\n      if (k in O) {\n        // i. Let kValue be the result of calling the Get internal \n        //    method of O with argument Pk.\n        kValue = O[k];\n        // ii. Let mappedValue be the result of calling the Call internal \n        //     method of callback with T as the this value and argument \n        //     list containing kValue, k, and O.\n        mappedValue = callback.call(T, kValue, k, O);\n        // iii. Call the DefineOwnProperty internal method of A with arguments\n        // Pk, Property Descriptor\n        // { Value: mappedValue,\n        //   Writable: true,\n        //   Enumerable: true,\n        //   Configurable: true },\n        // and false.\n        // In browsers that support Object.defineProperty, use the following:\n        // Object.defineProperty(A, k, {\n        //   value: mappedValue,\n        //   writable: true,\n        //   enumerable: true,\n        //   configurable: true\n        // });\n        // For best browser support, use the following:\n        A[k] = mappedValue;\n      }\n      // d. Increase k by 1.\n      k++;\n    }\n    // 9. return A\n    return A;\n  };\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/vendor/polyfill.js\n **/","/* global angular PUBNUB */\n/* global angular PubNub */\n\nconst commonConfig = require('../config.common.json');\n\nlet Wrapper = require('./wrapper.js');\nlet WrapperPubNubV3 = require('./v3/wrapper_pubnub_v3.js');\nlet WrapperPubNubV4 = require('./v4/wrapper_pubnub_v4.js');\n\nangular.module('pubnub.angular.service', [])\n  .factory('Pubnub', ['$rootScope', function ($rootScope) {\n    if (typeof PUBNUB === 'undefined' && typeof PubNub === 'undefined') {\n      throw new Error('PUBNUB is not in global scope. Ensure that pubnub.js file is included before pubnub-angular.js');\n    }\n\n    let service = {};\n    let instances = {};\n    /**\n     * Return the version of PubNub used by the PubNub service.\n     *\n     * @param {Object} initConfig\n     */\n    service.getPubNubVersion = function () {\n      return (typeof PUBNUB === 'undefined') ? '4' : '3';\n    };\n\n    /**\n     * Initializer for default instance\n     *\n     * @param {Object} initConfig\n     */\n    service.init = function (initConfig) {\n      return service.getInstance(commonConfig.default_instance_name).init(initConfig);\n    };\n\n    /**\n     * Instance getter\n     *\n     * @param instanceName\n     * @returns {Wrapper}\n     */\n    service.getInstance = function (instanceName) {\n      let instance = instances[instanceName];\n\n      if (angular.isDefined(instance) && instance instanceof Wrapper) {\n        return instance;\n      } else if (typeof instanceName === 'string' && instanceName.length > 0) {\n        if (this.getPubNubVersion() === '3') {\n          instances[instanceName] = new WrapperPubNubV3(instanceName, service, $rootScope);\n        } else if (this.getPubNubVersion() === '4') {\n          instances[instanceName] = new WrapperPubNubV4(instanceName, service, $rootScope);\n        }\n\n        return instances[instanceName];\n      }\n\n      return instance;\n    };\n\n    /**\n     * Generate unique method/callback event name\n     *\n     * @param {string} methodName\n     * @param {string} callbackName\n     * @param {string} instanceName\n     * @returns {string} event name\n     */\n    service.getEventNameFor = function (methodName, callbackName, instanceName) {\n      if (!instanceName) instanceName = commonConfig.default_instance_name;\n\n      return [commonConfig.pubnub_prefix, instanceName, methodName, callbackName].join(':');\n    };\n\n    /**\n     * Generate unique message event name for specified channel\n     *\n     * @param {string} channelName\n     * @param {string} instanceName\n     * @returns {string} event name\n     */\n    service.getMessageEventNameFor = function (channelName, instanceName) {\n      if (!instanceName) instanceName = commonConfig.default_instance_name;\n\n      return [commonConfig.pubnub_prefix, instanceName, 'subscribe', 'callback', channelName].join(':');\n    };\n\n    /**\n     * Generate unique presence event name for specified channel\n     *\n     * @param {string} channelName\n     * @param {string} instanceName\n     * @returns {string} event name\n     */\n    service.getPresenceEventNameFor = function (channelName, instanceName) {\n      if (!instanceName) instanceName = commonConfig.default_instance_name;\n\n      return [commonConfig.pubnub_prefix, instanceName, 'subscribe', 'presence', channelName].join(':');\n    };\n\n    /**\n     * Subscribe method wrapper for default instance\n     *\n     * @param {object} args\n     */\n    service.subscribe = function (args) {\n      this.getInstance(commonConfig.default_instance_name).subscribe(args);\n    };\n\n    return service;\n  }]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/pubnub.js\n **/","module.exports = {\n\t\"pubnub_prefix\": \"pubnub\",\n\t\"default_instance_name\": \"default\"\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./config.common.json\n ** module id = 3\n ** module chunks = 0\n **/","/* global angular */\n\nconst config = require('../config.common.json');\n\nmodule.exports = class {\n  /**\n  * Constructor\n  * The constructor is called through this way $pubnubChannel(channelName, options) and shoudld rarely called directely\n  * @param {String} label: instance name\n  * @param {Hash} service: PubNub Angular service composed of functions\n  * @param {$rootScope} $rootScope : the $rootScope of the PubNub Angular service\n  * @param {Hash} $rootScope : the $rootScope of the PubNub Angular service\n  * @constructor\n  */\n  constructor(label, service, $rootScope, wrapperConfig) {\n    this.label = label;\n    this.mockingInstance = null;\n    this.pubnubInstance = null;\n\n    // Register the methods in the wrapper and replace callbacks by mocked callbacks if needed\n    wrapperConfig.methods_to_wrap.forEach(method => {\n      this.wrapMethod(method);\n\n      // Add the wrapped method to the service\n      service[method] = function (args, callbackFunction) {\n        return this.getInstance(config.default_instance_name)[method](args, callbackFunction);\n      };\n    });\n\n    // Just delegate the methods to the wrapper\n    wrapperConfig.methods_to_delegate.forEach(method => {\n      this[method] = (args) => this.getOriginalInstance()[method](args);\n      // Add the delegated method to the service\n      service[method] = function (args) {\n        return this.getInstance(config.default_instance_name)[method](args);\n      };\n    });\n  }\n\n  /**\n  * This method returns the label of the wrapper which is the name of the instance.\n  **/\n  getLabel() {\n    return this.label;\n  }\n\n  /**\n  * This method returns the original PubNub instance associated with this wrapper\n  **/\n  getOriginalInstance() {\n    if (this.pubnubInstance) {\n      return this.pubnubInstance;\n    } else {\n      throw new ReferenceError('Pubnub default instance is not initialized yet. Invoke #init() method first.');\n    }\n  }\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/wrapper.js\n **/","/* global angular PUBNUB */\n\nlet Wrapper = require('../wrapper.js');\nlet MockV3 = require('./mock_v3.js');\nconst configPubNubV3 = require('./config.pubnub-v3.json');\n\nmodule.exports = class extends Wrapper {\n\n  constructor(label, service, $rootScope) {\n    super(label, service, $rootScope, configPubNubV3);\n    this.mockingInstance = new MockV3(label, service, $rootScope);\n  }\n\n  init(initConfig) {\n    this.pubnubInstance = new PUBNUB(initConfig);\n  }\n\n  subscribe(args) {\n    let callbacks = this.mockingInstance.getCallbacksToMock(args, configPubNubV3.subscribe_callbacks_to_wrap);\n    this.mockingInstance.mockCallbacks(this.getLabel(), 'subscribe', args, callbacks);\n    this.getOriginalInstance().subscribe(args);\n  }\n\n  /**\n  * This method add to the Wrapper the original PubNub method overrided with event broadcast if needed.\n  **/\n  wrapMethod(methodName) {\n    this[methodName] = (args) => {\n      if (angular.isObject(args)) {\n        let callbacks = this.mockingInstance.getCallbacksToMock(args, configPubNubV3.common_callbacks_to_wrap);\n        this.mockingInstance.mockCallbacks(this.getLabel(), methodName, args, callbacks);\n      }\n\n      return this.getOriginalInstance()[methodName](args);\n    };\n  }\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/v3/wrapper_pubnub_v3.js\n **/","/* global angular */\nlet Mock = require('../mock.js');\nmodule.exports = class extends Mock {\n\n  /**\n   * Returns a mocked version of the given callback broadcasting the callback through\n   * the AngularJS event broadcasting mechanism.\n   *\n   * @param {function} originalCallback\n   * @param {string} callbackName\n   * @param {string} methodName\n   * @param {string} instanceName\n   * @param {string} methodArguments: the arguments of the method that setup the callback\n   * @return {Function} mocked callback function broadcasting angular events on the rootScope\n   */\n\n  generateMockedVersionOfCallback(originalCallback, callbackName, methodName, instanceName, methodArguments) {\n    let $rootScope = this.$rootScope;\n    let service = this.service;\n    const channelName = methodArguments.channel || methodArguments.channel_group;\n\n    return function () {\n      // Broadcast through the generic event name\n      $rootScope.$broadcast.bind.apply(\n            $rootScope.$broadcast,\n            [$rootScope, service.getEventNameFor(methodName, callbackName, instanceName)]\n              .concat(Array.prototype.slice.call(arguments))\n          )();\n\n        // Call the original callback\n      if (callbackName && angular.isFunction(originalCallback)) {\n        originalCallback.apply(null, arguments);\n      }\n\n        // Broadcast through the message event or presence event\n      if (methodName === 'subscribe') {\n        switch (callbackName) {\n          case 'callback':\n            $rootScope.$broadcast.bind.apply(\n                  $rootScope.$broadcast,\n                  [$rootScope, service.getMessageEventNameFor(channelName, instanceName)]\n                    .concat(Array.prototype.slice.call(arguments))\n                )();\n            break;\n          case 'presence':\n            $rootScope.$broadcast.bind.apply(\n                  $rootScope.$broadcast,\n                  [$rootScope, service.getPresenceEventNameFor(channelName, instanceName)]\n                    .concat(Array.prototype.slice.call(arguments))\n                )();\n            break;\n          default:\n            break;\n        }\n      }\n    };\n  }\n\n  /**\n   * Mock passed in callbacks with callback-wrappers to invoke both original callbacks and angular events\n   *\n   * This method is replacing from the list of arguments {{args}} the callbacks functions\n   * allowed and enabled to be mocked provided by the {{callbackList}} by new callbacks functions\n   * including the Angular event broadcasting\n   *\n   * @param {string} instanceName\n   * @param {string} methodName\n   * @param {Object} methodArguments : argument list of the function\n   * @param {Array} callbacksList : list of callbacks functions to be mocked\n   */\n  mockCallbacks(instanceName, methodName, methodArguments, callbacksList) {\n    let originalCallback;\n    let currentCallbackName;\n\n    let l = callbacksList.length;\n    let i;\n\n    // Replace each callbacks allowed to be mocked.\n    for (i = 0; i < l; i++) {\n      if (!angular.isObject(methodArguments)) {\n        return;\n      }\n\n      currentCallbackName = callbacksList[i];\n      originalCallback = methodArguments[currentCallbackName];\n\n      // We replace the original callback with a mocked version.\n      methodArguments[currentCallbackName] = this.generateMockedVersionOfCallback(originalCallback, currentCallbackName, methodName, instanceName, methodArguments);\n    }\n  }\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/v3/mock_v3.js\n **/","/* global angular */\nmodule.exports = class {\n\n  constructor(label, service, $rootScope) {\n    this.label = label;\n    this.$rootScope = $rootScope;\n    this.service = service;\n  }\n\n  /**\n   * Return the list of callbacks names allowed and enabled to be mocked.\n   *\n   * This methods given a list of callbacks names {{initialCallbackNames}} and the argument list\n   * of the function {{argsValue}} will return the list of callbacks names that can be mocked.\n   * This method is usefull for the {{mockCallbacks}} method in order to know which callback functions to mock.\n   *\n   * @param {Object} argsValue from method call\n   * @param {Array} initialCallbackNames from config object\n   * @returns {Array} of callbacks to mock\n   */\n  getCallbacksToMock(argsValue, initialCallbackNames) {\n    let triggerEventsValue = argsValue.triggerEvents;\n    let result = [];\n    let length;\n    let value;\n    let i;\n\n    if (triggerEventsValue === true) {\n      return initialCallbackNames;\n    } else if (angular.isObject(triggerEventsValue)) {\n      length = triggerEventsValue.length;\n\n      for (i = 0; i < length; i++) {\n        value = triggerEventsValue[i];\n        if (initialCallbackNames.indexOf(value) >= 0) result.push(value);\n      }\n\n      return result;\n    } else {\n      return [];\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/mock.js\n **/","module.exports = {\n\t\"methods_to_delegate\": [\n\t\t\"replay\",\n\t\t\"unsubscribe\",\n\t\t\"revoke\",\n\t\t\"audit\",\n\t\t\"time\",\n\t\t\"channel_group\",\n\t\t\"channel_group_list_groups\",\n\t\t\"channel_group_list_namespaces\",\n\t\t\"channel_group_remove_namespace\",\n\t\t\"channel_group_cloak\",\n\t\t\"get_subscribed_channels\",\n\t\t\"set_uuid\",\n\t\t\"get_uuid\",\n\t\t\"auth\",\n\t\t\"set_cipher_key\",\n\t\t\"get_cipher_key\",\n\t\t\"raw_encrypt\",\n\t\t\"raw_decrypt\",\n\t\t\"set_heartbeat\",\n\t\t\"get_heartbeat\",\n\t\t\"set_heartbeat_interval\",\n\t\t\"get_heartbeat_interval\"\n\t],\n\t\"methods_to_wrap\": [\n\t\t\"here_now\",\n\t\t\"history\",\n\t\t\"publish\",\n\t\t\"here_now\",\n\t\t\"where_now\",\n\t\t\"state\",\n\t\t\"grant\",\n\t\t\"revoke\",\n\t\t\"channel_group_add_channel\",\n\t\t\"channel_group_list_channels\",\n\t\t\"channel_group_remove_channel\",\n\t\t\"channel_group_remove_group\",\n\t\t\"mobile_gw_provision\"\n\t],\n\t\"subscribe_callbacks_to_wrap\": [\n\t\t\"callback\",\n\t\t\"connect\",\n\t\t\"reconnect\",\n\t\t\"disconnect\",\n\t\t\"error\",\n\t\t\"idle\",\n\t\t\"presence\"\n\t],\n\t\"common_callbacks_to_wrap\": [\n\t\t\"callback\",\n\t\t\"error\"\n\t]\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/v3/config.pubnub-v3.json\n ** module id = 8\n ** module chunks = 0\n **/","/* global angular PubNub */\n\nlet Wrapper = require('../wrapper.js');\nlet MockV4 = require('./mock_v4.js');\nlet SubscribeEventsBroadcaster = require('./subscribe_events_broadcaster.js');\nconst configPubNubV4 = require('./config.pubnub-v4.json');\n\n\nmodule.exports = class extends Wrapper {\n\n  constructor(label, service, $rootScope) {\n    super(label, service, $rootScope, configPubNubV4);\n    this.mockingInstance = new MockV4(label, service, $rootScope);\n    this.subscribeEventsBroadcaster = new SubscribeEventsBroadcaster(label, service, $rootScope, this);\n  }\n\n  init(initConfig) {\n    this.pubnubInstance = new PubNub(initConfig);\n  }\n\n  subscribe(args) {\n    // Events to trigger [message, presence, status]\n    let eventsToBroadcast = this.mockingInstance.getCallbacksToMock(args, configPubNubV4.subscribe_listener_events_to_broadcast);\n    this.subscribeEventsBroadcaster.enableEventsBroadcast(eventsToBroadcast, args);\n    this.getOriginalInstance().subscribe(args);\n  }\n\n  /**\n  * This method add to the Wrapper the original PubNub method overrided with event broadcast if needed.\n  **/\n  wrapMethod(methodName) {\n    this[methodName] = (args, callbackFunction) => {\n      if (angular.isObject(args)) {\n        let callbacks = this.mockingInstance.getCallbacksToMock(args, configPubNubV4.common_callbacks_to_wrap);\n        // Mock the callback to trigger events\n        if (callbacks.length > 0) {\n          callbackFunction = this.mockingInstance.generateMockedVersionOfCallback(callbackFunction, 'callback', methodName, this.getLabel());\n        }\n      }\n\n      return this.getOriginalInstance()[methodName](args, callbackFunction);\n    };\n  }\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/v4/wrapper_pubnub_v4.js\n **/","/* global angular */\nlet Mock = require('../mock.js');\nmodule.exports = class extends Mock {\n\n  /**\n   * Returns a mocked version of the given callback broadcasting the callback through\n   * the AngularJS event broadcasting mechanism.\n   *\n   * @param {function} originalCallback\n   * @param {string} callbackName\n   * @param {string} methodName\n   * @param {string} instanceName\n   * @return {Function} mocked callback function broadcasting angular events on the rootScope\n   */\n\n  generateMockedVersionOfCallback(originalCallback, callbackName, methodName, instanceName) {\n    let $rootScope = this.$rootScope;\n    let service = this.service;\n\n    return function () {\n      // Broadcast through the generic event name\n      $rootScope.$broadcast.bind.apply(\n            $rootScope.$broadcast,\n            [$rootScope, service.getEventNameFor(methodName, callbackName, instanceName)]\n              .concat(Array.prototype.slice.call(arguments))\n          )();\n\n        // Call the original callback\n      if (callbackName && angular.isFunction(originalCallback)) {\n        originalCallback.apply(null, arguments);\n      }\n    };\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/v4/mock_v4.js\n **/","/* global angular */\nmodule.exports = class {\n\n  constructor(label, service, $rootScope, wrapper) {\n    this.wrapper = wrapper;\n    this.label = label;\n    this.$rootScope = $rootScope;\n    this.service = service;\n    this.broadcastStatus = false;\n    this.broadcastedChannels = {};\n    this.broadcastedPresenceChannels = {};\n    this.subscribeListener = null;\n  }\n\n  initializeSubscribeListener() {\n    let $rootScope = this.$rootScope;\n    let service = this.service;\n    let self = this;\n    this.subscribeListener = this.service.getInstance(this.label).addListener({\n      message(m) {\n        if ((m.subscription && self.broadcastedChannels[m.subscription]) ||\n             (m.channel && self.broadcastedChannels[m.channel])) {\n          $rootScope.$broadcast.bind.apply(\n                   $rootScope.$broadcast,\n                   [$rootScope, service.getMessageEventNameFor(m.subscribedChannel, self.label)]\n                     .concat(Array.prototype.slice.call(arguments))\n                 )();\n        }\n      },\n      presence(m) {\n        let presenceChannel = null;\n        // If from channel group\n        if (m.subscription !== null && self.broadcastedPresenceChannels[m.subscription]) {\n          presenceChannel = m.subscription;\n        } else if (m.channel !== null && self.broadcastedPresenceChannels[m.channel]) {\n          presenceChannel = m.channel;\n        }\n\n        if (presenceChannel !== null) {\n          $rootScope.$broadcast.bind.apply(\n                   $rootScope.$broadcast,\n                   [$rootScope, service.getPresenceEventNameFor(presenceChannel, self.label)]\n                     .concat(Array.prototype.slice.call(arguments))\n                 )();\n        }\n      },\n      status() {\n        if (self.broadcastStatus) {\n          let eventName = self.service.getEventNameFor('subscribe', 'status', self.label);\n          self.$rootScope.$broadcast.bind.apply(\n               self.$rootScope.$broadcast,\n               [self.$rootScope, eventName]\n                 .concat(Array.prototype.slice.call(arguments))\n             )();\n        }\n      }\n    });\n  }\n\n  enableEventsBroadcast(eventsToBroadcast, args) {\n    eventsToBroadcast.forEach((eventToBroadcast) => {\n      if (eventToBroadcast === 'status') {\n        this.broadcastStatus = true;\n      }\n      if (eventToBroadcast === 'message') {\n        // Adds any message channel which are not presence channels\n        if (args.channels && args.channels.length > 0) {\n          args.channels.forEach((channel) => {\n            if (channel.slice(-7) !== '-pnpres') {\n              this.broadcastedChannels[channel] = true;\n            }\n          });\n        }\n        // Adds any message channel group which are not presence channels\n        if (args.channelGroups && args.channelGroups.length > 0) {\n          args.channelGroups.forEach((channelGroup) => {\n            if (channelGroup.slice(-7) !== '-pnpres') {\n              this.broadcastedChannels[channelGroup] = true;\n            }\n          });\n        }\n      }\n      if (eventToBroadcast === 'presence') {\n        // Adds the presence channels of the current channels\n        if (args.withPresence) {\n          if (args.channels && args.channels.length > 0) {\n            args.channels.forEach((channel) => (this.broadcastedPresenceChannels[channel] = true));\n          }\n          if (args.channelGroups && args.channelGroups) {\n            args.channelGroups.forEach((channelGroup) => (this.broadcastedPresenceChannels[channelGroup] = true));\n          }\n        // Add the presence channels that have been subscribed directely\n        } else {\n          if (args.channels && args.channels.length > 0) {\n            args.channels.forEach((channel) => {\n              if (channel.slice(-7) === '-pnpres') {\n                this.broadcastedPresenceChannels[channel.slice(0, -7)] = true;\n              }\n            });\n          }\n          if (args.channelGroups && args.channelGroups) {\n            args.channelGroups.forEach((channelGroup) => {\n              if (channelGroup.slice(-7) === '-pnpres') {\n                this.broadcastedPresenceChannels[channelGroup.slice(0, -7)] = true;\n              }\n            });\n          }\n        }\n      }\n    });\n    if (this.subscribeListener === null) {\n      this.initializeSubscribeListener();\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/v4/subscribe_events_broadcaster.js\n **/","module.exports = {\n\t\"methods_to_delegate\": [\n\t\t\"setUUID\",\n\t\t\"getUUID\",\n\t\t\"setAuthKey\",\n\t\t\"addListener\",\n\t\t\"unsubscribe\",\n\t\t\"time\",\n\t\t\"stop\",\n\t\t\"push\",\n\t\t\"channelGroups\"\n\t],\n\t\"methods_to_wrap\": [\n\t\t\"publish\",\n\t\t\"hereNow\",\n\t\t\"whereNow\",\n\t\t\"setState\",\n\t\t\"getState\",\n\t\t\"grant\",\n\t\t\"history\"\n\t],\n\t\"common_callbacks_to_wrap\": [\n\t\t\"callback\"\n\t],\n\t\"subscribe_listener_events_to_broadcast\": [\n\t\t\"message\",\n\t\t\"presence\",\n\t\t\"status\"\n\t]\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/v4/config.pubnub-v4.json\n ** module id = 12\n ** module chunks = 0\n **/","const pubnubConfig = require('../config.common.json');\n/* global angular */\nangular.module('pubnub.angular.service')\n    .factory('$pubnubChannel', ['$rootScope', 'Pubnub', '$q',\n    function ($rootScope, Pubnub, $q) {\n      /**\n      * Constructor\n      * The constructor is called through this way $pubnubChannel(channelName, options) and shoudld rarely called directely\n      * Optionnal parameters available to pass in the options hash:\n      * {\n      *    instance: 'deluxeInstance',  // The instance that will be used, default: {default PubNub instance}\n      *    autoload: 50,                // The number of messages we want to autoload from history, default: none\n      *    autosubscribe: true,         // Automatically subscribe to the channel, default: true\n      *    presence: false              // If autosubscribe enabled, subscribe and trigger the presence events, default: false\n      *    autostore: true              // Automatically store the messages received, default: true\n      *\n      * }\n      * @param {String} channel\n      * @param {Hash} config\n      * @returns {Array}\n      * @constructor\n      */\n      function PubnubChannel(channel, config) {\n        // Instanciate the PubnubChannel and return it\n        if (!(this instanceof PubnubChannel)) {\n          return new PubnubChannel(channel, config);\n        }\n\n        config = config || {};\n\n        if (!channel) {\n          throw new Error('The channel name is required');\n        }\n        // autosubscribe\n        if (config.autosubscribe && !(typeof config.autosubscribe === 'boolean')) {\n          throw new Error('The autosubscribe parameter should be a boolean');\n        }\n        // presence\n        if (config.presence && !(typeof config.presence === 'boolean')) {\n          throw new Error('The presence parameter should be a boolean');\n        }\n        // autostore\n        if (config.autostore && !(typeof config.autostore === 'boolean')) {\n          throw new Error('The autostore parameter should be a boolean');\n        }\n\n        let self = this;\n        // The channel we get data from\n        this._channel = channel;\n        // List that will store the messages received from the channel\n        this.$messages = [];\n        // Timetoken of the first message of the list\n        // usefull for knowing from where to fetch the list history from\n        this._timeTokenFirstMessage = null;\n        // Indicates if all the messages have been fetched from PubNub history\n        this._messagesAllFetched = false;\n        // PubNub Instance that will be used by this PubNub channel\n        this._pubnubInstance = config.instance ? Pubnub.getInstance(config.instance) : Pubnub.getInstance(pubnubConfig.default_instance_name);\n        // Number of messages (between 0 and 100) to autoload in this array calling PubNub history\n        this._autoload = config.autoload == null ? 0 : config.autoload;\n        // Subscribe and trigger the presence events\n        this._presence = config.presence == null ? false : config.presence;\n        // Indicates if it should automatically subscribe to the PubNub channel, default: true\n        this._autosubscribe = config.autosubscribe == null ? true : config.autosubscribe;\n        // Indicates if it should store automatically the messages received from PubNub\n        this._autostore = config.autostore == null ? true : config.autostore;\n\n        // Bind the public methods to make them available on the array.\n        this.$$getPublicMethods((fn, key) => {\n          self.$messages[key] = fn.bind(self);\n        });\n\n        // The handler that allow to stop listening to new messages\n        this._unsubscribeHandler = null;\n\n        // Autoload the messages\n        if (this._autoload !== 0) {\n          this.$load(this._autoload);\n        }\n        let eventsToTrigger = null;\n        if (Pubnub.getPubNubVersion() === '3') {\n          eventsToTrigger = ['callback', 'connect', 'reconnect', 'disconnect', 'error', 'idle'];\n        } else {\n          eventsToTrigger = ['status', 'message'];\n        }\n        // Trigger the presence event?\n        if (this._presence) {\n          eventsToTrigger.push('presence');\n        }\n        // Automatically subscribe to the channel\n        if (this._autosubscribe) {\n          // Automatically subscribe to the channel\n          let args = { triggerEvents: eventsToTrigger };\n          if (Pubnub.getPubNubVersion() === '3') {\n            args.channel = this._channel;\n            args.noheresync = true;\n          } else {\n            args.channels = [this._channel];\n            if (this._presence) {\n              args.withPresence = true;\n            }\n          }\n          this._pubnubInstance.subscribe(args);\n        }\n\n        // Automatically store the messages\n        if (this._autostore) {\n          let eventName = Pubnub.getMessageEventNameFor(self._channel, this._pubnubInstance.label);\n          this._unsubscribeHandler = $rootScope.$on(eventName, self.$$newMessage.bind(self));\n        }\n\n        return this.$messages;\n      }\n\n      PubnubChannel.prototype = {\n\n        /**\n        *   Fetch and load the previous messages in the $messages array\n        *   @param {Integer} numberOfMessages : number of messages we want to load.\n        *   @returns {Promise} messages loaded or error\n        */\n        $load(numberOfMessages) {\n          if (!(numberOfMessages > 0 && numberOfMessages <= 100)) {\n            throw new Error('The number of messages to load should be a number between 0 and 100');\n          }\n\n          let self = this;\n          let deferred = $q.defer();\n\n          let args = {\n            channel: self._channel,\n            count: numberOfMessages,\n            reverse: false\n          };\n          let callback = null;\n\n          if (Pubnub.getPubNubVersion() === '3') {\n            args.callback = function (m) {\n              // Update the timetoken of the first message\n              self._timeTokenFirstMessage = m[1];\n\n              self.$$storeBatch(m[0]);\n\n              // Updates the indicator that all messages have been fetched.\n              if (m[0].length < numberOfMessages) {\n                self._messagesAllFetched = true;\n              }\n\n              deferred.resolve(m);\n              $rootScope.$digest();\n            };\n            args.error = function (err) {\n              deferred.reject(err);\n            };\n          } else {\n            callback = function (status, response) {\n              if (status.error) {\n                deferred.reject(response);\n              } else {\n                // Update the timetoken of the first message\n                self._timeTokenFirstMessage = response.startTimeToken;\n\n                self.$$storeBatch(response.messages.map((item) => item.entry));\n\n                // Updates the indicator that all messages have been fetched.\n                if (response.messages.length < numberOfMessages) {\n                  self._messagesAllFetched = true;\n                }\n\n                deferred.resolve(response);\n                $rootScope.$digest();\n              }\n            };\n          }\n          // If there is already messages in the array and consequently a first message timetoken\n          if (self._timeTokenFirstMessage) {\n            args.start = self._timeTokenFirstMessage;\n          }\n          self._pubnubInstance.history(args, callback);\n          return deferred.promise;\n        },\n\n        /**\n        * Publish a message in the channel\n        * @param {Hash} message : message we want to send\n        * @returns {Promise} messages loaded or error\n        */\n        $publish(_message) {\n          let self = this;\n          let deferred = $q.defer();\n          let options = {\n            channel: self._channel,\n            message: _message\n          };\n          let callback = null;\n          if (Pubnub.getPubNubVersion() === '3') {\n            options.callback = (m) => { deferred.resolve(m); };\n            options.error = (err) => { deferred.reject(err); };\n          } else {\n            callback = (status, response) => {\n              if (status.error) {\n                deferred.reject(response);\n              } else {\n                deferred.resolve(response);\n              }\n            };\n          }\n          self._pubnubInstance.publish(options, callback);\n          return deferred.promise;\n        },\n\n        /**\n        * Return the Pubnub instance associated to this PubNub Channel\n        * @returns {Pubnub} the Pubnub instance\n        */\n        $pubnubInstance() {\n          return this._pubnubInstance;\n        },\n\n        /**\n        * Return the channel name on which this PubnubChannel\n        * @returns {String} the channel name\n        */\n        $channel() {\n          return this._channel;\n        },\n\n        /**\n        * Indicates if all the messages have been fetched\n        * @returns {Boolean} all the messages have been loaded\n        */\n        $allLoaded() {\n          return this._messagesAllFetched;\n        },\n\n        /**\n        * Inform the object to not receive the events anymore\n        * and and clears memory being used by this array\n        */\n        $destroy() {\n          if (this._unsubscribeHandler) {\n            this._unsubscribeHandler();\n          }\n          this.$messages.length = 0;\n        },\n\n        /**\n        * Called when an new message has been received in the channel from the PubNub network\n        * @protected\n        */\n        $$newMessage(ngEvent, m) {\n          if (Pubnub.getPubNubVersion() === '3') {\n            this.$$store(m);\n          } else {\n            this.$$store(m.message);\n          }\n          $rootScope.$digest();\n        },\n\n        /**\n        * Function called to store a message in the messages array.\n        * @protected\n        */\n        $$store(message) {\n          this.$messages.push(message);\n        },\n\n        /**\n        * Function called in order to store a batch of message in the messages array.\n        * @protected\n        */\n        $$storeBatch(messages) {\n          // We add the messages in the array\n          if (this.$messages.length === 0) {\n            angular.extend(this.$messages, messages);\n          } else {\n            Array.prototype.unshift.apply(this.$messages, messages);\n          }\n        },\n\n        /**\n        * These methods allow the PubNub channel to extend his array with his Public methods\n        */\n\n        // Get the list of the public methods of the PubnubChannel (prefixed by $)\n        // Return the list of the public methods of the prototype\n        $$getPublicMethods(iterator, context) {\n          this.$$getPrototypeMethods((m, k) => {\n            if (typeof(m) === 'function' && k.charAt(0) !== '_') {\n              iterator.call(context, m, k);\n            }\n          });\n        },\n\n        // Get the list of the methods of the PubnubChannel\n        // Return the list of the methods of the prototype\n        $$getPrototypeMethods(iterator, context) {\n          let methods = {};\n          let objProto = Object.getPrototypeOf({});\n          let proto = angular.isFunction(this) && angular.isObject(this.prototype) ?\n              this.prototype : Object.getPrototypeOf(this);\n          while (proto && proto !== objProto) {\n            for (let key in proto) {\n              if (proto.hasOwnProperty(key) && !methods.hasOwnProperty(key)) {\n                methods[key] = true;\n                iterator.call(context, proto[key], key, proto);\n              }\n            }\n            proto = Object.getPrototypeOf(proto);\n          }\n        }\n      };\n\n      /**\n      * This method allows a PubnubChannel to be inherited\n      * The methods passed into this function will be added onto the array's prototype.\n      /* They can override existing methods as well.\n\n      * @param {Object} methods a list of functions to add onto the prototype\n      * @returns {Function} the extended pubnubChannel object\n      * @static\n      */\n      PubnubChannel.$extend = function (methods) {\n        if (!angular.isObject(methods)) {\n          throw new Error('The methods parameter should be an object');\n        }\n\n        let ExtendedPubnubChannel = function (channel, config) {\n          if (!(this instanceof PubnubChannel)) {\n            return new ExtendedPubnubChannel(channel, config);\n          }\n          PubnubChannel.apply(this, arguments);\n          return this.$messages;\n        };\n        ExtendedPubnubChannel.prototype = Object.create(PubnubChannel.prototype);\n        angular.extend(ExtendedPubnubChannel.prototype, methods);\n\n        return ExtendedPubnubChannel;\n      };\n\n      return PubnubChannel;\n    }\n]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/pubnub_channel.js\n **/","/* @flow */\n\nconst pubnubConfig = require('../config.common.json');\n/* global angular */\nangular.module('pubnub.angular.service')\n    .factory('$pubnubChannelGroup', ['$rootScope', '$q', 'Pubnub', '$pubnubChannel',\n        function ($rootScope, $q, Pubnub, $pubnubChannel) {\n        /**\n         * Constructor\n         * The constructor is called through this way $pubnubChannelGroup(channelGroup, options) and shoudld rarely called directely\n         * This object is a container of channels\n         * You can access to one of a channel by calling the #getChannel(channel) method\n         * Optionnal parameters available to pass in the config hash:\n         * {\n         *    instance: 'deluxeInstance',  // The instance that will be used, default: {default PubNub instance}\n         *    autosubscribe: true,         // Automatically subscribe to the channel group, default: true\n         *    presence: false              // If autosubscribe enabled, subscribe and trigger the presence events for the channel group, default: false\n         *    channelExtension: {foo: function(){ return \"bar\"}} // Define additionnal functions or override some for the channel instanciated\n         *\n         * }\n         * @param {String} channelGroup | {Hash} config\n         * @returns the channel group itself;\n         * @constructor\n         */\n          function PubnubChannelGroup(channelGroup, _config) {\n                // Instanciate the PubnubChannelGroup and return it\n            if (!(this instanceof PubnubChannelGroup)) {\n              return new PubnubChannelGroup(channelGroup, _config);\n            }\n\n            let self = this;\n            let config = _config || {};\n\n            if (!channelGroup) {\n              throw new Error('The channel group name is required');\n            }\n\n            // autosubscribe\n            if (config.autosubscribe && !(typeof config.autosubscribe === 'boolean')) {\n              throw new Error('The autosubscribe parameter should be a boolean');\n            }\n            // presence\n            if (config.presence && !(typeof config.presence === 'boolean')) {\n              throw new Error('The presence parameter should be a boolean');\n            }\n\n            if (config.channelExtension && !(angular.isObject(config.channelExtension))) {\n              throw new Error('The channelExtension should be an object');\n            }\n\n            this._channelGroup = channelGroup;\n            // Maintain the list of channel objects\n            this.$channels = {};\n            // PubNub Instance that will be used by this PubNub channel\n            this._pubnubInstance = config.instance ? Pubnub.getInstance(config.instance) : Pubnub.getInstance(pubnubConfig.default_instance_name);\n            // Subscribe and trigger the presence events\n            this._presence = config.presence == null ? false : config.presence;\n            // Indicates if it should automatically subscribe to the PubNub channel, default: true\n            this._autosubscribe = config.autosubscribe == null ? true : config.autosubscribe;\n            // Extensions for the channel beeing instanciated\n            this._extendedChannel = config.channelExtension ? $pubnubChannel.$extend(config.channelExtension) : null;\n            // The handler that allow to stop listening to new messages\n            this._unsubscribeHandler = null;\n\n            let eventsToTrigger = null;\n            if (Pubnub.getPubNubVersion() === '3') {\n              eventsToTrigger = ['callback', 'connect', 'reconnect', 'disconnect', 'error', 'idle'];\n            } else {\n              eventsToTrigger = ['status', 'message'];\n            }\n            // Trigger the presence event?\n            if (this._presence) {\n              eventsToTrigger.push('presence');\n            }\n            // Automatically subscribe to the channel\n            if (this._autosubscribe) {\n              // Automatically subscribe to the channel\n              let args = { triggerEvents: eventsToTrigger };\n              if (Pubnub.getPubNubVersion() === '3') {\n                args.channel_group = this._channelGroup;\n              } else {\n                args.channelGroups = [this._channelGroup];\n              }\n              this._pubnubInstance.subscribe(args);\n            }\n\n            // Allow to unsubscribe to the channel group\n            let eventName = Pubnub.getMessageEventNameFor(self._channelGroup, self._pubnubInstance.label);\n            this._unsubscribeHandler = $rootScope.$on(eventName, self.$$newMessage.bind(self));\n\n            return this;\n          }\n\n          PubnubChannelGroup.prototype = {\n            /**\n             * Return the channel object specified from the name\n             * the message can be from any channel of the channel group\n             * @protected\n             */\n            $channel(channel) {\n              if (!angular.isDefined(this.$channels[channel])) {\n                let options = {\n                  instance: this._pubnubInstance.label,\n                  autosubscribe: false,\n                  presence: false,\n                  autostore: true\n                };\n                let newChannel = this._extendedChannel ? new this._extendedChannel(channel, options) : $pubnubChannel(channel, options);\n                this.$channels[channel] = newChannel;\n              }\n\n              return this.$channels[channel];\n            },\n\n            /**\n             * Return the Pubnub instance associated to this PubNub Channel Group\n             * @returns {Pubnub} the Pubnub instance\n             */\n            $pubnubInstance() {\n              return this._pubnubInstance;\n            },\n\n            /**\n             * Return the channel name on which this PubnubChannelGroup is based\n             * @returns {String} the channel name\n             */\n            $channelGroup() {\n              return this._channelGroup;\n            },\n\n            /**\n             * Inform the object to not receive the events anymore\n             * and and clears memory being used by this array\n             */\n            $destroy() {\n              this._unsubscribeHandler();\n\n              for (let channel in this.$channels) {\n                if (this.$channels.hasOwnProperty(channel)) {\n                  delete this.$channels[channel];\n                }\n              }\n            },\n\n            /**\n             * Called when an new message has been received in the channel from the PubNub network\n             * the message can be from any channel of the channel group\n             * @protected\n             */\n            $$newMessage(ngEvent, message, env) {\n              let channel = null;\n              if (Pubnub.getPubNubVersion() === '3') {\n                channel = env[3];\n              } else {\n                channel = message.channel;\n              }\n              this.$channel(channel).$$newMessage(ngEvent, message, env);\n            }\n          };\n\n          return PubnubChannelGroup;\n        }\n    ]);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/pubnub_channel_group.js\n **/"],"sourceRoot":""}